@* Generator: MvcHelper GeneratePrettyNames: true DisableLinePragmas: true *@

@helper Panel(string idPrefix, params SwitchablePanelModel[] switches)
{
	if (string.IsNullOrWhiteSpace(idPrefix))
	{
		idPrefix = "sw-panel-" + Guid.NewGuid();
	}
	<div>
		<div class="btn-group">
			@for (var i = 0; i < switches.Length; ++i)
			{
				<button type="button" class="btn btn-default @( i == 0 ? "btn-primary" : "")" onclick="window.legacy.ShowPanel(event)" data-div-id="@idPrefix-@i">@switches[i].Name</button>
			}
		</div>
		@for (var i = 0; i < switches.Length; ++i)
		{
			<div id="@idPrefix-@i" class="statistic-container @( i == 0 ? "load-content" : "")" data-url="@switches[i].Url"></div>
		}
	</div>
}

@helper TimePanel(string idPrefix, Func<RouteValueDictionary, string> getUrl, dynamic arguments, params Tuple<string, double>[] intervals)
{
	var switches = new List<SwitchablePanelModel>();
	foreach (var interval in intervals)
	{
		var periodStart = DateTime.Now.Subtract(TimeSpan.FromDays(interval.Item2));
		switches.Add(new SwitchablePanelModel
		{
			Name = interval.Item1,
			Url = GetUrl(getUrl, arguments, periodStart)
		});
	}
	switches.Add(new SwitchablePanelModel
	{
		Name = "За всё время",
		Url = GetUrl(getUrl, arguments, DateTime.MinValue)
	});
	@Panel(idPrefix, switches.ToArray())
}

@functions
{

	private static string GetUrl(Func<RouteValueDictionary, string> getUrl, object arguments, DateTime periodStart)
	{
		var arg = new RouteValueDictionary(arguments);
		arg["periodStart"] = periodStart;
		return getUrl(arg);
	}

}