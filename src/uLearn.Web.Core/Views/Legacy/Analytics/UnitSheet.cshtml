@using Database.Models
@using uLearn.Web.Extensions
@using Ulearn.Common
@using Ulearn.Common.Extensions
@using Ulearn.Core.Courses.Slides
@using Ulearn.Core.Courses.Slides.Exercises
@using Ulearn.Core.Courses.Slides.Quizzes
@using Ulearn.Core.Extensions
@using FormMethod = System.Web.Mvc.FormMethod
@using SelectListItem = System.Web.Mvc.SelectListItem

@model UnitSheetPageModel
@{
	ViewBag.Title = Model.Unit.Title;
}

@functions
{

	bool IsSlideHiddenOnSmallScreens(Slide slide)
	{
		if (slide is QuizSlide)
			return !((QuizSlide)slide).ManualChecking;

		if (slide is ExerciseSlide)
			return !((ExerciseSlide)slide).Scoring.RequireReview;
		return true;
	}

}

<body>
<div class="container">

	<h2>
		@Model.Unit.Title.TruncateWithEllipsis(35)

		<small>
			<a href="#filters" class="visible-xs-inline ml10" data-toggle="true" data-scroll="false">
				<span class="no-underline glyphicon glyphicon-filter"></span>
			</a>
		</small>
		<br class="visible-xs"/>
		<small class="visible-xs">с @Model.PeriodStart.ToShortDateString() по @Model.PeriodFinish.ToShortDateString()</small>
	</h2>
	<div class="analytics__dashboard">
		@using (Html.BeginForm("UnitSheet", "Analytics", FormMethod.Get, new { @class = "form-inline", id = "unit-statistics-filter-form" }))
		{
			@Html.Hidden("courseId", Model.CourseId)

			<div id="filters" class="hidden-xs-inline">
				<div class="form-group">
					@Html.DropDownList("unitId",
						Model.Units.Select(unit => new SelectListItem { Text = unit.Title, Selected = unit == Model.Unit, Value = unit.Id.ToString() }),
						new { @class = "form-control selectpicker show-tick" })
				</div>

				<div class="form-group sm-ml10 ib">
					с @Html.TextBox("periodStart", Model.PeriodStart.ToString("dd.MM.yyyy"), new { @class = "form-control form-control-date datetimepicker ib" })
				</div>

				<div class="form-group ib">
					по @Html.TextBox("periodFinish", Model.PeriodFinish.ToString("dd.MM.yyyy"), new { @class = "form-control form-control-date datetimepicker ib" })
				</div>

				@Html.Partial("~/Views/Shared/_GroupsFilter.cshtml", new GroupsFilterViewModel
				{
					CourseId = Model.CourseId,
					SelectedGroupsIds = Model.SelectedGroupsIds,
					Groups = Model.Groups,
					UsersIdsWithGroupsAccess = Model.GroupsAccesses.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Select(s => s.UserId).ToList()),
				})

				<div class="form-group">
					<button role="button" class="btn btn-primary">Отфильтровать</button>
				</div>
			</div>
		}

		<div class="vspace-20 hidden-xs hidden-sm"></div>

		@if (Model.ShowStatisticsLink)
		{
			<h2>
				@Html.ActionLink("Статистика", "UnitStatistics", new
				{
					courseId = Model.CourseId, unitId = Model.Unit.Id,
					periodStart = Model.PeriodStart.ToString("dd.MM.yyyy"), periodFinish = Model.PeriodFinish.ToString("dd.MM.yyyy"),
					group = Model.SelectedGroupsIdsJoined
				})
			</h2>
		}

		<div id="students">
			@{
				var exercisesAndQuizzes = Model.Slides.Where(s => s is QuizSlide || s is ExerciseSlide).ToList();
				var modifiableScoringGroups = Model.Unit.Scoring.Groups.Values.Where(g => g.CanBeSetByInstructor).ToList();
			}

			<h2>Студенты</h2>

			<table id="unit-statistics-students-table">
				<tr class="small-table__title">
					<td class="small-table__title__cell">пользователь</td>
					<td class="small-table__title__cell small-table__student-progress-cell hidden-xs-table-cell">прогресс</td>
					@foreach (var slide in exercisesAndQuizzes)
					{
						var isHiddenOnSmallScreens = IsSlideHiddenOnSmallScreens(slide);
						if (slide is QuizSlide)
						{
							<td class="glyphicon glyphicon-pushpin small-table__title__cell @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "")" title="@slide.Title"></td>
						}
						else if (slide is ExerciseSlide)
						{
							<td class="glyphicon glyphicon-edit small-table__title__cell @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "")" title="@slide.Title"></td>
						}
					}

					@foreach (var scoringGroup in modifiableScoringGroups)
					{
						<td class="small-table__title__cell" title="@scoringGroup.Name — @scoringGroup.MaxAdditionalScore.PluralizeInRussian(new RussianPluralizationOptions { One = "балл", Two = "балла", Five = "баллов", Gender = Gender.Male, hideNumberOne = false, smallNumbersAreWords = false })">
							@scoringGroup.Abbreviation (@scoringGroup.MaxAdditionalScore)
						</td>
					}
				</tr>

				@foreach (var userInfo in Model.VisitedUsers)
				{
					var visitedSlidesCount = Model.VisitedSlidesCountByUser.GetOrDefault(userInfo.UserId, 0);
					var visitedSlidesCountAllTime = Model.VisitedSlidesCountByUserAllTime.GetOrDefault(userInfo.UserId, 0);
					var userVisibleName = userInfo.UserVisibleName != "" ? userInfo.UserVisibleName : userInfo.UserName;
					var userGroupsIds = Model.UsersGroupsIds.GetOrDefault(userInfo.UserId, new List<int>());
					var userModifiableScoringGroupsIds = Model.EnabledAdditionalScoringGroupsForGroups
						.Where(kv => userGroupsIds.Contains(kv.Key))
						.SelectMany(kv => kv.Value)
						.ToList();

					<tr class="student">
						<td class="small-table__student-name-cell" title="@userInfo.UserName">
							@Html.ActionLink(userVisibleName.TruncateWithEllipsis(25), "UserUnitStatistics", new { courseId = Model.CourseId, unitId = Model.Unit.Id, userId = userInfo.UserId }, new { title = "Посмотреть статистику пользователя " + userInfo.UserName })
						</td>
						<td class="small-table__student-progress-cell hidden-xs-table-cell">
							<div class="student-progress progress">
								<div class="progress-bar progress-bar-warning"
									style="width: @(100 * (visitedSlidesCountAllTime - visitedSlidesCount) / Math.Max(1, Model.Slides.Count))%"
									title="Посмотрел(а) @((visitedSlidesCountAllTime - visitedSlidesCount).PluralizeInRussian(new RussianPluralizationOptions { One = "слайд", Two = "слайда", Five = "слайдов", Gender = Gender.Male })) вне указанного период">
								</div>
								<div class="progress-bar progress-bar-success"
									style="width: @(100 * visitedSlidesCount / Math.Max(1, Model.Slides.Count))%"
									title="Посмотрел(а) @visitedSlidesCount.PluralizeInRussian(new RussianPluralizationOptions { One = "слайд", Two = "слайда", Five = "слайдов", Gender = Gender.Male }) в указанный период">
								</div>
							</div>
						</td>

						@foreach (var exerciseOrQuiz in exercisesAndQuizzes)
						{
							var visit = Model.SlidesVisits.GetOrDefault(exerciseOrQuiz.Id, new List<Visit>()).FirstOrDefault(v => v.UserId == userInfo.UserId);
							var isHiddenOnSmallScreens = IsSlideHiddenOnSmallScreens(exerciseOrQuiz);
							if (visit != null && visit.IsPassed)
							{
								var isFullScore = visit.Score == exerciseOrQuiz.MaxScore;
								<td class="small-table__right-cell score @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "") @(isFullScore ? "full-score" : "") @(visit.Score == 0 ? "zero-score" : "")" title="@visit.Timestamp.ToPrettyString()">
									@if (exerciseOrQuiz is ExerciseSlide)
									{
										@Html.ActionLink(
											visit.Score.ToString(),
											"UserSolutions",
											"Analytics",
											new { courseId = Model.CourseId, slideId = exerciseOrQuiz.Id, userId = userInfo.UserId },
											new { title = "Посмотреть решения", target = "_blank" })
									}
									else
									{
										@visit.Score
									}
								</td>
							}
							else
							{
								<td class="small-table__right-cell score @(isHiddenOnSmallScreens ? "hidden-xs-table-cell" : "") zero-score">&nbsp;</td>
							}
						}

						@foreach (var scoringGroup in modifiableScoringGroups)
						{
							var userAndScoringGroup = Tuple.Create(userInfo.UserId, scoringGroup.Id);
							var isModifiableForUser = scoringGroup.EnabledForEveryone || userModifiableScoringGroupsIds.Contains(scoringGroup.Id);
							<td class="small-table__title__cell additional-score">
								@if (isModifiableForUser)
								{
									<a href="#" class="internal-page-link additional-score-link" title="Изменить оценку «@scoringGroup.Name»" data-scoring-type="@scoringGroup.Id">
										@if (Model.AdditionalScores.ContainsKey(userAndScoringGroup))
										{
											@Model.AdditionalScores[userAndScoringGroup]
										}
										else
										{
											<span>&mdash;</span>
										}
									</a>
									<input name="additional-score"
											class="form-control input-sm additional-score-input"
											min="0"
											max="@scoringGroup.MaxAdditionalScore"
											value="@(Model.AdditionalScores.ContainsKey(userAndScoringGroup) ? Model.AdditionalScores[userAndScoringGroup].ToString() : "")"
											data-scoring-type="@scoringGroup.Id"
											data-url="@Url.Action("SetAdditionalScore", "Admin", new { courseId = Model.CourseId, unitId = Model.Unit.Id, userId = userInfo.UserId, scoringGroupId = scoringGroup.Id })"/>
								}
							</td>
						}
					</tr>
				}
			</table>
			@if (!Model.VisitedUsers.Any())
			{
				<div class="text-muted">Здесь пока никого не было.</div>
			}
			@if (modifiableScoringGroups.Count > 0)
			{
				<div class="additional-scores__edit-mode__control pull-right">
					<button class="btn btn-success btn-sm additional-scores__edit-mode__save-button">Сохранить баллы</button>
				</div>
			}
		</div>

		@if (Model.VisitedUsersIsMore)
		{
			<div class="text-muted">
				Показаны <b>200</b> лучших студентов
			</div>
		}
	</div>
</div>
</body>